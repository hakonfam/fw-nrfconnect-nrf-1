import cbor2
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import intelhex
import hashlib
from os import path
from ecdsa import SigningKey
from pathlib import Path


def parse_args():
    parser = ArgumentParser(
        description='''Generate a modem firmware update given the binaries that should
go into it.''',
        formatter_class=RawDescriptionHelpFormatter)

    subparsers = parser.add_subparsers(dest="mode")
    manifest_parser = subparsers.add_parser("manifest")
    wrapper_parser = subparsers.add_parser("wrapper")

    manifest_parser.add_argument("-i", "--input", nargs='+', required=True, type=str,
                        help="Path to input binary files (hex).")

    manifest_parser.add_argument("-c", "--compat", required=False, type=int, default=0,
                        help="Compatibility tag.")

    manifest_parser.add_argument("-o", "--output-dir", required=True, type=str,
                        help="Where to place the generated files.")

    wrapper_parser.add_argument("-m", "--manifest", required=True, type=str,
                        help="Manifest file as generated by the 'manifest' command.")

    wrapper_parser.add_argument("-s", "--signature", required=True, type=str,
                        help="Bin file containing the signature of the manifest.")

    wrapper_parser.add_argument("-o", "--output-dir", required=True, type=str,
                        help="Where to place the generated files.")

    return parser.parse_args()

def generate_manifest(args):
    segments = []
    blob_string = b""
    for file_path in args.input:
        ih = intelhex.IntelHex(file_path)
        for start, end in ih.segments():
            segments.extend((start, end - start))
            blob_string += ih.tobinarray(start=start, end=end-1)

    segment_string = cbor2.dumps(segments)

    manifest = []
    manifest.append(1) # Protocol version
    manifest.append(args.compat)
    manifest.append(hashlib.sha256(blob_string).digest())
    manifest.append(segment_string)

    manifest_string = cbor2.dumps(manifest)

    Path(args.output_dir).mkdir(parents=True, exist_ok=True)

    with open(path.join(args.output_dir, "blob.bin"), 'wb+') as f:
        f.write(blob_string)
    with open(path.join(args.output_dir, "manifest.bin"), 'wb+') as f:
        f.write(manifest_string)

def generate_wrapper(args):
    with open(args.manifest, 'rb') as f:
        manifest_string = f.read()
    with open(args.signature, 'rb') as f:
        signature_string = f.read()
    cose = []
    cose.append(cbor2.dumps({1: -7})) # Protected header: alg id -7: ECDSA, SHA256
    cose.append({}) # Unprotected header: empty
    cose.append(manifest_string) # Payload
    cose.append(signature_string) # Signature

    wrapper_string = cbor2.dumps(cbor2.CBORTag(18, cose))

    Path(args.output_dir).mkdir(parents=True, exist_ok=True)

    with open(path.join(args.output_dir, "wrapper.bin"), 'wb+') as f:
        f.write(wrapper_string)


if __name__ == "__main__":
    args = parse_args()
    if args.mode == "manifest":
        generate_manifest(args)
    elif args.mode == "wrapper":
        generate_wrapper(args)
    else:
        raise RuntimeError("unknown mode")